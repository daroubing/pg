#!/usr/bin/env python
#! -*- coding: utf-8 -*-

import re
import os
import sys
import tempfile
import optparse
import ConfigParser
import subprocess
import shutil


def keep_path(func):
    def wrapper(*args, **kwargs):
        cwd = os.getcwd()
        res = func(*args, **kwargs)
        os.chdir(cwd)
        return res
    return wrapper


class PG(object):
    IMPORT_PATTERN = re.compile('^\s*import')

    def __init__(self, configfile, protofiles):
        self.protofiles = protofiles
        self.cf = ConfigParser.ConfigParser()
        self.cf.read(configfile)
        self.build_param()
        self.make_temp_files()
        print "Start..."
        print "TmpDir {0}".format(self.tmp_dir)

        self.merge_proto_to_one_file()


    def make_temp_files(self):
        self.tmp_dir = tempfile.mkdtemp()
        _, self.tmp_proto_file = tempfile.mkstemp(dir=self.tmp_dir)


    def exit(self, exit_code=0):
        #shutil.rmtree(self.tmp_dir)
        sys.exit(exit_code)


    def build_param(self):
        outdir = self.cf.get('global', 'outdir')
        if outdir.startswith('/'):
            # absolute path
            self.config_outdir = outdir
        else:
            self.config_outdir = os.path.join(os.getcwd(), outdir)

        self.config_protoc = self.cf.get('global', 'protoc')


    def merge_proto_to_one_file(self):
        print "Merge Protobufs to One File..."
        with open(self.tmp_proto_file, 'a') as tmpf:
            for p in self.protofiles:
                for line in file(p):
                    if self.IMPORT_PATTERN.search(line) is not None:
                        # ignore the `import ...` line
                        continue

                    tmpf.write(line)


    @keep_path
    def generate_description(self):
        print "Generate Protobuf Description..."
        os.chdir(self.tmp_dir)

        name = "{0}.protobin".format(os.path.basename(self.tmp_proto_file))
        cmd = [self.config_protoc,
               "--descriptor_set_out={0}".format(name),
               os.path.basename(self.tmp_proto_file)
               ]
        self.run_subprocess(cmd)
        return name


    def run_subprocess(self, cmd):
        print "Run: {0}".format(' '.join(cmd))
        pipe = subprocess.PIPE
        p = subprocess.Popen(cmd, stdout=pipe, stderr=pipe)
        exitcode = p.wait()
        stdout, stderr = p.communicate()
        if exitcode:
            # error
            print "CMD ERROR:", ' '.join(cmd)
            print stderr
            self.exit(1)

        return stdout



    @keep_path
    def process_csharp(self):
        print
        print "Process Charp..."

        config_mono = self.cf.get('csharp', 'mono')
        config_gmcs = self.cf.get('csharp', 'gmcs')
        config_protogen = self.cf.get('csharp', 'protogen')
        config_pro_out = self.cf.get('csharp', 'protogen_out')
        config_pro_namespace = self.cf.get('csharp', 'protogen_namespace')

        config_precompile = self.cf.get('csharp', 'precompile')
        config_pre_out = self.cf.get('csharp', 'precompile_out')
        config_pre_namespace = self.cf.get('csharp', 'precompile_namespace')

        config_protobufdll = self.cf.get('csharp', 'protobufdll')

        cs_file = "{0}.cs".format(os.path.basename(self.tmp_proto_file))
        os.chdir(self.tmp_dir)
        def generate_protocol_csharp():
            print "Generate Csharp File..."
            des_file = self.generate_description()

            cmd = [config_mono,
                   config_protogen,
                   "-i:{0}".format(des_file),
                   "-o:{0}".format(cs_file),
                   "-ns:{0}".format(config_pro_namespace)
                   ]

            self.run_subprocess(cmd)

        def generate_protocol_dll():
            print "Generate Protocol DLL..."
            shutil.copy(config_protobufdll, self.tmp_dir)
            cmd = [config_gmcs,
                   "-t:library",
                   "-r:{0}".format(config_protobufdll),
                   "-out:{0}".format(config_pro_out),
                   cs_file
                   ]

            self.run_subprocess(cmd)

        def generate_precompile_dll():
            print "Generate Precompiled DLL..."
            cmd = [config_mono,
                   config_precompile,
                   config_pro_out,
                   "-o:{0}".format(config_pre_out),
                   "-t:{0}".format(config_pre_namespace)
                  ]

            self.run_subprocess(cmd)

        generate_protocol_csharp()
        generate_protocol_dll()
        generate_precompile_dll()


    @keep_path
    def process_erlang(self):
        print
        print "Process Erlang..."


    @keep_path
    def process_python(self):
        print
        print "Process Python"

        os.chdir(self.tmp_dir)

        cmd = [self.config_protoc,
               "--python_out=.",
               os.path.basename(self.tmp_proto_file)
              ]

        self.run_subprocess(cmd)




    def run(self):
        for section in self.cf.sections():
            if section == 'global':
                continue

            method_name = 'process_{0}'.format(section)
            method = getattr(self, method_name)
            method()



if __name__ == '__main__':
    parse = optparse.OptionParser()
    parse.add_option(
            "-c",
            dest="configfile",
            help="config file to use"
            )

    options, args = parse.parse_args()
    if not options.configfile:
        parse.print_help()
        sys.exit(1)

    if not args:
        print "No input protobuf files"
        sys.exit(1)

    pg = PG(options.configfile, args)
    pg.run()


