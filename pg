#!/usr/bin/env python
#! -*- coding: utf-8 -*-

import re
import os
import sys
import tempfile
import ConfigParser
import subprocess
import shutil


def keep_path(func):
    def wrapper(*args, **kwargs):
        cwd = os.getcwd()
        res = func(*args, **kwargs)
        os.chdir(cwd)
        return res
    return wrapper


class PG(object):
    IMPORT_PATTERN = re.compile('^\s*import')
    PROTOFILE = "protocol"

    def __init__(self, protofiles):
        proto_dir = os.path.dirname(os.path.realpath(protofiles[0]))
        configfile = os.path.join(proto_dir, 'pg.conf')
        define_ini = os.path.join(proto_dir, 'define.ini')

        if not os.path.exists(configfile):
            raise  IOError("No 'pg.conf' Found in {0}".format(proto_dir))

        if not os.path.exists(define_ini):
            raise IOError("No 'define.ini' Found in {0}".format(proto_dir))

        _define_ini = ConfigParser.ConfigParser()
        _define_ini.optionxform = str
        _define_ini.read(define_ini)
        self.define_items = _define_ini.items('define')
        self.define_items_id_to_name_dict = {_id: _name for _name, _id in self.define_items}

        self.protofiles = protofiles
        self.cf = ConfigParser.ConfigParser()
        self.cf.read(configfile)
        self.build_param()
        self.make_temp_files()
        print "Start..."
        print "TmpDir {0}".format(self.tmp_dir)
        print "OutDir {0}".format(self.config_outdir)

        self.merge_proto_to_one_file()


    def make_temp_files(self):
        self.tmp_dir = tempfile.mkdtemp()
        self.tmp_proto_file = os.path.join(self.tmp_dir, self.PROTOFILE)


    def exit(self, exit_code=0):
        shutil.rmtree(self.tmp_dir)
        sys.exit(exit_code)


    def build_param(self):
        outdir = self.cf.get('global', 'outdir')
        if outdir.startswith('/'):
            # absolute path
            self.config_outdir = outdir
        else:
            self.config_outdir = os.path.join(os.getcwd(), outdir)

        self.config_protoc = self.cf.get('global', 'protoc')


    def merge_proto_to_one_file(self):
        print "Merge Protobufs to One File..."
        with open(self.tmp_proto_file, 'a') as f:
            for p in self.protofiles:
                for line in file(p):
                    if self.IMPORT_PATTERN.search(line) is not None:
                        # ignore the `import ...` line
                        continue

                    f.write(line)


    def run_subprocess(self, cmd):
        pipe = subprocess.PIPE
        p = subprocess.Popen(cmd, stdout=pipe, stderr=pipe)
        exitcode = p.wait()
        stdout, stderr = p.communicate()
        if exitcode:
            # error
            print "CMD ERROR:", ' '.join(cmd)
            print stderr
            self.exit(1)

        return stdout


    @keep_path
    def generate_description(self):
        print "Generate Protobuf Description..."
        os.chdir(self.tmp_dir)

        name = "{0}.protobin".format(os.path.basename(self.tmp_proto_file))
        cmd = [self.config_protoc,
               "--descriptor_set_out={0}".format(name),
               os.path.basename(self.tmp_proto_file)
               ]
        self.run_subprocess(cmd)
        return name


    @keep_path
    def process_csharp(self):
        print
        print "[CSharp]"

        config_mono = self.cf.get('csharp', 'mono')
        config_mcs = self.cf.get('csharp', 'mcs')
        config_protogen = self.cf.get('csharp', 'protogen')
        config_precompile = self.cf.get('csharp', 'precompile')
        config_protobufdll = self.cf.get('csharp', 'protobufdll')

        protogen_out = 'ProtocolDefine.dll'
        protogen_namespace = 'Protocol.Define'
        precompile_out = 'ProtocolSerializer.dll'
        precompile_type = 'Protocol.Serializer'


        cs_file = "{0}.cs".format(os.path.basename(self.tmp_proto_file))

        os.chdir(self.tmp_dir)

        shutil.copy(config_protobufdll, self.tmp_dir)

        def generate_protocol_csharp():
            print "Generate Csharp File..."
            des_file = self.generate_description()

            cmd = [config_mono,
                   config_protogen,
                   "-i:{0}".format(des_file),
                   "-o:{0}".format(cs_file),
                   "-ns:{0}".format(protogen_namespace)
                   ]

            self.run_subprocess(cmd)


        def generate_protocol_dll():
            print "ProtoGen DLL..."
            cmd = [config_mcs,
                   "-debug-",
                   "-sdk:2",
                   "-t:library",
                   "-r:{0}".format(config_protobufdll),
                   "-out:{0}".format(protogen_out),
                   cs_file
                   ]

            self.run_subprocess(cmd)


        def generate_precompile_dll():
            print "PreCompile DLL..."
            cmd = [config_mono,
                   config_precompile,
                   protogen_out,
                   "-o:{0}".format(precompile_out),
                   "-t:{0}".format(precompile_type)
                  ]

            self.run_subprocess(cmd)


        def generate_protocol_handler_file():
            print "Generate Protocol Handler File..."
            os.makedirs('Protocol')
            file_name = os.path.join('Protocol', 'Handler.cs')
            template = """
using System;
using System.IO;
using System.Net;
using System.Collections.Generic;

namespace Protocol
{
    public static class ProtocolHandler
    {
        private readonly static Dictionary<Int16, Type> IdToTypeDict = new Dictionary<Int16, Type>{
%s
        };

        private readonly static Dictionary<Type, Action<Object>> MethodDispatcher = new Dictionary<Type,  Action<Object>>{
%s
        };

        public static Type GetProtocolTypeById(Int16 id)
        {
            return IdToTypeDict[id];
        }


        public static byte[] Pack(Object data)
        {
            using (var ms = new MemoryStream())
            {
                var ser = new Serializer();
                ser.Serialize(ms, data);
                return ms.ToArray();
            }
        }

        private static byte[] PackWithId(Object data, Int16 id)
        {
            var dataBytes = Pack(data);

            id = IPAddress.HostToNetworkOrder(id);
            var idBytes = BitConverter.GetBytes(id);

            var buffer = new byte[dataBytes.Length + idBytes.Length];

            idBytes.CopyTo(buffer, 0);
            dataBytes.CopyTo(buffer, idBytes.Length);
            return buffer;
        }


        public static void Process(byte[] data)
        {
            var ms = new MemoryStream(data);
            var br = new BinaryReader(ms);

            var id = br.ReadInt16();
            id = IPAddress.NetworkToHostOrder(id);

            var dataBytes = br.ReadBytes(data.Length - 2);
            ms.Close();

            var dataStream = new MemoryStream(dataBytes);

            var ser = new Serializer();
            var protocolType = GetProtocolTypeById(id);
            var msg = ser.Deserialize(dataStream, null, protocolType);

            dataStream.Close();

            MethodDispatcher[protocolType](msg);
        }

%s

    }
}
"""

            pack_with_id_template = """
        public static byte[] PackWithId(Protocol.Define.%s data)
        {
            return PackWithId(data, %s);
        }
            """

            id_type_dict = []
            for name, _id in self.define_items:
                line = "            {%s, typeof(Protocol.Define.%s)}," % (_id, name)
                id_type_dict.append(line)


            method_dispatcher = []
            for name, _id in self.define_items:
                line = "            {typeof(Protocol.Define.%s), o => Protocol.Implement.%s.Process((Protocol.Define.%s)o)}," % (
                    name, name, name
                )
                method_dispatcher.append(line)

            pack_with_id = []
            for name, _id in self.define_items:
                code_area = pack_with_id_template % (name, _id)
                pack_with_id.append(code_area)


            with open(file_name, 'w') as f:
                file_content = template % (
                    '\n'.join(id_type_dict),
                    '\n'.join(method_dispatcher),
                    '\n'.join(pack_with_id)
                )

                f.write(file_content)


        def generate_protocol_implement_files():

            print "Generate Protocol Implement Files..."
            os.makedirs(os.path.join('Protocol', 'Implement'))
            template = """
namespace Protocol.Implement
{
    public static class %s
    {
        public static void Process(%s msg)
        {
            // Logic here
            throw new System.Exception("Not Implemented: %s");
        }
    }
}
"""
            for name, _ in self.define_items:
                file_name = os.path.join('Protocol', 'Implement', name + '.cs')
                file_content = template % (name, 'Protocol.Define.' + name, name)
                with open(file_name, 'w') as f:
                    f.write(file_content)


        generate_protocol_csharp()
        generate_protocol_dll()
        generate_precompile_dll()
        generate_protocol_handler_file()
        generate_protocol_implement_files()

        return [protogen_out, precompile_out, os.path.basename(config_protobufdll), 'Protocol']


    @keep_path
    def process_erlang(self):
        print
        print "[Erlang]"

        os.chdir(self.tmp_dir)

        print "Generate erl & hrl files..."

        config_protoc_erl = self.cf.get('erlang', 'protoc-erl')
        config_gpb_hrl = self.cf.get('erlang', 'gpb_hrl')
        config_msgprefix = self.cf.get('erlang', 'msgprefix')
        config_msgsuffix = self.cf.get('erlang', 'msgsuffix')
        config_filename = self.cf.get('erlang', 'filename')

        msgprefix = config_msgprefix if config_msgprefix else ""
        msgsuffix = config_msgsuffix if config_msgsuffix else ""

        def generate_protocol_erl_file():
            print "Generate {0}.erl & {0}.hrl file...".format(config_filename)

            proto_name = "{0}.proto".format(config_filename)
            shutil.copy(os.path.basename(self.tmp_proto_file), proto_name)
            shutil.copy(config_gpb_hrl, self.tmp_dir)

            cmd = [config_protoc_erl,
                   "-o", ".",
                   "-I", ".",
                   "-strbin",
                   proto_name
                  ]

            if config_msgprefix:
                cmd.append("-msgprefix")
                cmd.append(config_msgprefix)

            if config_msgsuffix:
                cmd.append("-msgsuffix")
                cmd.append(config_msgsuffix)

            self.run_subprocess(cmd)

        def generate_protocol_handler_file():
            file_name = "{0}_handler.erl".format(config_filename)

            print "Generate {0} file...".format(file_name)

            template = """
-module(%s).

-export([pack/1,
         pack_with_id/1,
         process/2]).


-include("%s.hrl").

pack(Msg) ->
    %s:encode_msg(Msg).

pack_with_id(Msg) ->
    Id = get_msg_id(Msg),
    Data = pack(Msg),
    <<Id:16, Data/binary>>.

process(DataWithId, State) ->
    <<Id:16, Data/binary>> = DataWithId,
    MsgName = get_msg_name(Id),
    DecodedData = %s:decode_msg(Data, MsgName),
    %s_implement:process(DecodedData, State).


%s


%s

"""
            get_msg_id = []
            for name, _id in self.define_items:
                record_type = "#'%s%s%s'{}" % (msgprefix, name, msgsuffix)
                get_msg_id.append("get_msg_id(%s) -> %s;" % (record_type, _id))
            get_msg_id[-1] = get_msg_id[-1][:-1] + '.'

            get_msg_name = []
            for name, _id in self.define_items:
                msg_name = '%s%s%s' % (msgprefix, name, msgsuffix)
                get_msg_name.append("get_msg_name(%s) -> '%s';" % (_id, msg_name))
            get_msg_name[-1] = get_msg_name[-1][:-1] + '.'

            file_content = template % (
                "{0}_handler".format(config_filename),
                config_filename,
                config_filename,
                config_filename,
                config_filename,
                '\n'.join(get_msg_id),
                '\n'.join(get_msg_name),
            )

            with open(file_name, 'w') as f:
                f.write(file_content)



        def generate_protocol_implement_file():
            file_name = "{0}_implement.erl".format(config_filename)

            print "Generate {0} file...".format(file_name)

            template = """
-module(%s).

-include("%s.hrl").

-export([process/2]).

%s

"""

            process_template = """
process(#'%s'{}, State) ->
    erlang:error("Not Implement: %s"),
    State;"""

            process_funcs = []
            for name, _ in self.define_items:
                p = msgprefix + name + msgsuffix
                line = process_template % (p, p)
                process_funcs.append(line)
            process_funcs[-1] = process_funcs[-1][:-1] + '.'

            file_content = template % (
                "{0}_implement".format(config_filename),
                config_filename,
                '\n\n'.join(process_funcs)
            )

            with open(file_name, 'w') as f:
                f.write(file_content)


        generate_protocol_erl_file()
        generate_protocol_handler_file()
        generate_protocol_implement_file()


        return ["{0}.erl".format(config_filename),
                "{0}.hrl".format(config_filename),
                os.path.basename(config_gpb_hrl),
                "{0}_handler.erl".format(config_filename),
                "{0}_implement.erl".format(config_filename)
                ]


    def copy_to_outdir(self, section, files):
        folder = os.path.join(self.config_outdir, section)
        shutil.rmtree(folder, ignore_errors=True)
        os.makedirs(folder, 0755)

        for f in files:
            f_path = os.path.join(self.tmp_dir, f)
            if os.path.isdir(f_path):
                shutil.copytree(f_path, os.path.join(folder, f))
            else:
                shutil.copy(f_path, folder)


    def run(self):
        for section in self.cf.sections():
            if section == 'global':
                continue

            method_name = 'process_{0}'.format(section)
            method = getattr(self, method_name)
            files = method()

            self.copy_to_outdir(section, files)

        self.exit()


if __name__ == '__main__':
    pg = PG(sys.argv[1:])
    pg.run()
